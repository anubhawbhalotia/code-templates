<snippet>
	<content><![CDATA[
class LcaBinaryLifting
{
private:
	vvi up;
	vi in, out;
	int n, root;
	int traverseDfs(vector <node> &tree, vi &in, vi &out, int root, int &c)
	{
		in[root] = c++;
		up[root][0] = tree[root].p.X;
		int i = 0;
		while(up[root][i] != -1)
		{
			up[root][i + 1] = up[up[root][i]][i];
			i++;
		}
		for(auto i : tree[root].c)
		{
			traverseDfs(tree, in, out, i.X, c);
		}
		out[root] = c++;
		return 1;
	}
	bool isAncestor(int x, int y)
	{
		if(x == -1 || y == -1)
			return 1;
		if(in[y] >= in[x] && out[y] <= out[x])
			return 1;
		return 0;
	}
public:
	int build(vector<node> &tree)
	{
		n = tree.size() - 1;
		root = tree[tree.size() - 1].a;
		up.resize(n, vi(32, -1));
		in.resize(n);
		out.resize(n);
		int c = 0;
		traverseDfs(tree, in, out, root, c);
	}
	int lca(int x, int y)
	{
		if(isAncestor(x, y))
			return x;
		int l = 0, r = 31;
		while(l < r)
		{
			int mid = (l + r) / 2  + 1;
			if(isAncestor(up[x][mid], y))
			{
				r = mid - 1;
			}
			else
			{
				x = up[x][mid];
			}
		}
		if(isAncestor(up[x][l], y))
		{
			return up[x][0];
		}
		else
		{
			return up[up[x][l]][0];
		}
	}	
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>LcaBinaryLifting</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
