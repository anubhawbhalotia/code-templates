<snippet>
	<content><![CDATA[
class SumOfSubset
{
private:
	vi sos;
	int n;	//range [0, n)
	int b;	//number of bits
public:
	SumOfSubset(int countBits)	// when range is [0, 1<<n)
	{
		b = countBits;	//number of bits
		n = 1<<b;	//range [0, n)
		sos.resize(n, 0);
	}
	SumOfSubset(int countBits, int rangeEnding)	// when range is [0, n)
	{
		b = countBits;
		n = rangeEnding;
		sos.resize(n, 0);
	}
	vi getSumOfSubsetMemoryOptimised(vi &a)	// better
	{
		f(i, 0, n)
		{
			sos[i] = a[i];
		}
		f(i, 0, b)
		{
			f(mask, 0, n)
			{
				if(mask & (1<<i))
					sos[mask] += sos[mask ^ (1<<i)];
			}
		}
		return sos;
	}
	vi getSumOfSubsetIterativeVersion(vi &a)	// uses extra memory
	{
		map<pt, int> DP;
		f(mask, 0, n)
		{
			DP[{mask, -1}] = a[mask];
			f(i, 0, b)
			{
				if(mask & (1<<i))
					DP[{mask, i}] = DP[{mask, i - 1}] + 
						DP[{mask ^ (1<<i), i - 1}];
				else
					DP[{mask, i}] = DP[{mask, i - 1}];
			}
			sos[mask] = DP[{mask, b - 1}];
		}
		return sos;
	}
	int getSOSVal(int mask)	// returns sum of subset of mask
	{
		return sos[mask];
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>SumOfSubset</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
